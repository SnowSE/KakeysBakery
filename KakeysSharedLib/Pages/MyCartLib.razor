@page "/Cart"
@* @attribute [Microsoft.AspNetCore.Authorization.Authorize] *@
@using BlazorBootstrap
@using System.Net.Http.Json
@using KakeysSharedLib.Data
@using KakeysSharedLib.OAuth
@using Microsoft.AspNetCore.Components.Authorization

@inject HttpClient client
@inject IAuthenticationManager authManager
@inject NavigationManager navManager


<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />

@if (IsDataLoaded)
{
    <div class="align-content-center p-5" id="totalCart">
        <div class="text-center">
            <h2 id="pageTitle"> YOUR CART </h2>
        </div>


        <div class="p-4" style="background-color: #EBDCCE;">
            <table>
                <thead>
                    <tr>
                        <th scope="col"></th>
                        <th scope="col"></th>
                        <th class="px-3 itemDescription" scope="col"></th>
                        <th class="px-3 itemDescription" scope="col"></th>
                        <th class="px-3 removeColumn" scope="col"></th>
                    </tr>
                    <tr><td colspan="4"><hr /></td></tr>
                </thead>
                <tbody>
                    @foreach (var cart in allCartItemsForCustomer!)
                    {
                        <tr class="cartCard flex-row">
                            <td class="pe-4">
                                <div class="d-flex position-relative order-container rounded-5 m-3 p-3">
                                    <img class="imgbutton img-fluid shadow rounded-5 img-thumbnail" src="https://kakeybakerystorage9.blob.core.windows.net/bakerybasics/@(cart!.Product!.ProductAddonBasegoods!.FirstOrDefault()!.Basegood!.Type!.Basegood).jpg">
                                </div>
                            </td>
                            <td>
                                <h1 class="itemName">@cart.Product!.Productname</h1>
                                <p class="itemDescription">
                                    @(@cart.Product!.Description ?? "Product has no description")
                                </p>
                            </td>
                            <td class="ps-4 itemDescription">
                                <input class="form-control" type="number" min="1" max="100" @bind="cart.Quantity" @oninput="@(e => UpdateCartQuantity(e, cart))" />
                            </td>
                            <td class="px-3 itemDescription">$@getPrice(cart)</td>
                            <td class="d-flex justify-content-center">
                                <button class="btn btn-danger" @onclick="async () => { await removeFromCartAsync(cart.Id);}">
                                    <h3 class="bi bi-trash rounded mt-2" />
                                </button>
                            </td>
                        </tr>
                        <tr><td colspan="4"><hr /></td></tr>
                    }

                    <tr id="">
                        <td colspan="4" style="text-align: right;" class="itemDescription" id="displayTotal">TOTAL: $@getPrice(allCartItemsForCustomer)</td>
                    </tr>
                </tbody>
            </table>
            @if (allCartItemsForCustomer!.Count > 0) {
                <div><button class="btn btn-primary" @onclick="async () => { await CheckoutCart(currentCustomer!.Id);}">Place Order</button></div>
            }
        </div>

    </div>
}
else
{
    <div class="mt-5">
        <div class="d-flex flex-wrap justify-content-center">
            <Spinner Type="SpinnerType.Dots" />
        </div>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private string email = "";
    List<ToastMessage> messages = new List<ToastMessage>();
    Customer? currentCustomer = new();
    List<Cart>? allCartItemsForCustomer = new();
    bool IsDataLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        await authManager.SetAuthState(authenticationState);

        //https://github.com/paypal/paypal-rest-api-specifications/blob/main/openapi/payments_payment_v2.json
        //https://github.com/christianhelle/refitter


        //var octocat = await paypalapi.();

        if (!(await authManager!.IsUserLoggedIn()))
        {
            navManager.NavigateTo("Account/Login?redirectUri=/", forceLoad: true);
            return;
        }

        email = await authManager.GetUserEmail();

        try
        {
            currentCustomer = await client.GetFromJsonAsync<Customer>($"api/customer/get_by_email/{email}");
            var products = await client.GetFromJsonAsync<List<Product>>("api/product/getall");

            //get the cart and then filter itself to only get items connected to the current customer
            allCartItemsForCustomer = await client.GetFromJsonAsync<List<KakeysSharedLib.Data.Cart>>("api/cart/getall");
            allCartItemsForCustomer = allCartItemsForCustomer!.Where(i => i.Customerid == currentCustomer!.Id).ToList();
            List<ProductAddonBasegood>? PABs = await client.GetFromJsonAsync<List<ProductAddonBasegood>>("api/productAddonBasegood/getall");
            List<Basegood>? basegoods = await client.GetFromJsonAsync<List<Basegood>>("api/Basegood/getall");
            List<Addon>? addons = await client.GetFromJsonAsync<List<Addon>>("api/Addon/getall");
            List<Basegoodtype>? types = await client.GetFromJsonAsync<List<Basegoodtype>>("api/Basegoodtype/getall");
            foreach (var cart in allCartItemsForCustomer)
            {
                cart.Product = products!.Find(p => p.Id == cart.Productid);
                cart.Product!.ProductAddonBasegoods = PABs!.FindAll(pab => pab.Productid == cart.Productid);
                foreach (var pab in cart.Product!.ProductAddonBasegoods)
                {
                    pab.Addon = addons!.Find(a => a.Id == pab.Addonid);
                    pab.Basegood = basegoods!.Find(b => b.Id == pab.Basegoodid);
                    pab.Basegood!.Type = types!.Find(t => t.Id == pab.Basegood.Typeid);
                }
            }

        }
        catch (Exception e) { throw e; }
        StateHasChanged();

        await base.OnInitializedAsync();
        IsDataLoaded = true;
    }
    private decimal getPrice(List<Cart> carts)
    {
        decimal toReturn = 0m;
        foreach (Cart c in carts)
        {
            toReturn += getPrice(c);
        }
        return toReturn;
    }
    private decimal getPrice(Cart cart)
    {
        decimal total = 0.0m;
        foreach (var pab in cart.Product!.ProductAddonBasegoods)
        {

            if (pab.Basegood is not null && pab.Basegood.Suggestedprice is not null)
            {
                total += (decimal)pab.Basegood!.Suggestedprice;
            }
            if (pab.Addon is not null && pab.Addon.Suggestedprice is not null)
            {
                total += (decimal)pab.Addon!.Suggestedprice;
            }
        }
        if (cart.Quantity is null || cart.Quantity < 1)
        {
            cart.Quantity = 1;
        }
        return total * (decimal)cart.Quantity;
    }
    private async Task updateLocalCartToDatabaseAsync(List<Cart> carts)
    {
        foreach (var cart in carts)
        {
            var skinnyCart = cart;
            skinnyCart.Product = null;
            skinnyCart.Customer = null;

            await client.PatchAsJsonAsync("api/cart/update", cart);
        }
    }
    private async Task removeFromCartAsync(int cartId)
    {
        await client.DeleteAsync($"api/cart/delete/{cartId}");
        allCartItemsForCustomer!.Remove(allCartItemsForCustomer.Find(c => c.Id == cartId)!);
        StateHasChanged();
    }
    public async Task CheckoutCart(int customerId)
    {
        IsDataLoaded = false;

        if (allCartItemsForCustomer!.Count < 1) { 
            CreateToastMessage(ToastType.Danger, "No items in cart");
            IsDataLoaded = true; 
            return; 
        }
        await updateLocalCartToDatabaseAsync(allCartItemsForCustomer!);
        
        //TODO: ADD PAY PALL Logic and redirection HERE
        
        int purchaseId = await client.GetFromJsonAsync<int>($"api/cart/CheckoutLogic/{customerId}");
        if (purchaseId > 0)
        {
            allCartItemsForCustomer = new();
            CreateToastMessage(ToastType.Success, "Success!");
            StateHasChanged();
        }
        else //It failed and returned an invalid purchaseID
        {
            CreateToastMessage(ToastType.Danger, "Error occured when checking out");
        }
        IsDataLoaded = true;
    }


    private void CreateToastMessage(ToastType type, string message)
    {
        messages.Add(
            new ToastMessage
                {
                    Type = type,
                    Message = message,
                });
    }

    private async Task UpdateCartQuantity(ChangeEventArgs e, Cart cart)
    {
        try
        {
            var newQuantity = Convert.ToInt32(e.Value!.ToString());
            if (newQuantity < 1 || newQuantity > 100) { return; }

            cart.Quantity = newQuantity;
            await client.PatchAsJsonAsync<Cart>($"api/cart/update/", cart);
        }
        catch { }
    }
}
