@page "/Customize"

@* @using Microsoft.AspNetCore.Components.Authorization *@
@using KakeysSharedLib.Data
@using KakeysSharedLib.Services.Interfaces
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@using BlazorBootstrap

@inject IAddonService addon
@inject IBaseGoodService basegood
@inject IAddonTypeService addontype
@inject IAddonFlavorService addonflavor
@inject IProductService product
@inject ICustomerService customer
@inject IProductAddonBasegoodService prod_basegood_addon
@inject ICartService cart

<body>
    <h3>This form is for pastries with a small to medium amount of customization. If you wish for a highly customized cake or a cake with lots of detail, please contact me directly [link to contact me]</h3>
    <div class="mt-5 bg-light border vh-100 ">
        <div class="d-flex flex-wrap justify-content-between p-5">

            <div class="p-3 d-flex flex-column" @onclick="async ()=>await WeddingCake.ShowAsync()">
                <img src="https://kakeybakerystorage9.blob.core.windows.net/bakerybasics/weddingcake.png" class="imgbutton img-fluid img-thumbnail rounded-5 shadow">
                <p class="text-center">Wedding Cake</p>
            </div>
            <div class="p-3 d-flex flex-column" @onclick="async ()=> await Cupcake.ShowAsync()">
                <img src="https://kakeybakerystorage9.blob.core.windows.net/bakerybasics/cupcakes.png" class="imgbutton img-fluid img-thumbnail rounded-5 shadow">
                <p class="text-center">Cupcakes</p>
            </div>
            <div class="p-3 d-flex flex-column " @onclick="async ()=> await RoundCake.ShowAsync()">
                <img src="https://kakeybakerystorage9.blob.core.windows.net/bakerybasics/customcake.png" class="imgbutton img-fluid img-thumbnail rounded-5 shadow">
                <p class="text-center">Round Cakes</p>
            </div>
            <div class="p-3 d-flex flex-column " @onclick="async ()=> await SheetCake.ShowAsync()">
                <img src="https://kakeybakerystorage9.blob.core.windows.net/bakerybasics/Sheetcake.jpg" class="imgbutton img-fluid img-thumbnail rounded-5 shadow">
                <p class="text-center">Sheet Cakes</p>
            </div>
        </div>
    </div>
</body>

<Modal @ref="WeddingCake" Title="Wedding Cake">
    <BodyTemplate>
        <p>Sorry, at this time I do not accept customizing wedding cakes online. If you wish to order a wedding cake from me, you can contact me at _____ or _____ anytime to set up a consultation and I will get back with you as soon as I can.</p>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="async () => { await WeddingCake.HideAsync(); }">Close</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="Cupcake" Title="Customize a Cupcake">
    <BodyTemplate>
        @(iterator = 1)
        <div>
            <label>What frosting flavor do you want</label>

            <select @onchange="(e) => OnFrostingChange(e, iterator)">
                <option>---</option>
                @foreach (Addon frosting in frostings)
                {
                    @if (frosting.Addonflavor is not null)
                    {
                        <option value="@frosting.Addonflavor.Flavor"> @frosting.Addonflavor.Flavor </option>
                    }
                }
            </select>
        </div>
        <div>
            <label>What flavor of cupcake do you want</label>

            <select @onchange="(e) => OnFlavorChange(e, iterator)">
                <option>---</option>
                @foreach (Addon cake in cupcakeFlavors)
                {
                    @if (cake.Addonflavor is not null)
                    {
                        <option value="@cake.Addonflavor.Flavor"> @cake.Addonflavor.Flavor</option>
                    }
                }
            </select>
        </div>

        <div>
            <label>Any flavored fillings</label>

            <select @onchange="(e) => OnFillingChange(e, iterator)">
                <option>---</option>
                @foreach (Addon filling in fillings)
                {
                    @if (filling.Addonflavor is not null)
                    {
                        <option value="@filling.Addonflavor.Flavor">@filling.Addonflavor.Flavor</option>
                    }

                }
            </select>
        </div>

        <div>
            <label>Count (in Dozens)</label>
            <input type="number" @bind-value="quantity" />
        </div>

        <div>
            <input rows="4" cols="50" @bind-value="description" placeholder="What additional customization do you want with this cupcake?" />
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary " @onclick="async () => { await Cupcake.HideAsync(); }">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick='async () => { await addToCart(" cupcake");}'> Add To Cart</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="SheetCake" Title="Customize Your Sheet Cake">
    <BodyTemplate>
        @(iterator = 1)
        <div>
            <label>What size do you want</label>
            <select @onchange="(e) => OnSizeChange(e, iterator)">
                <option>---</option>
                @foreach (Addontype size in sheetSizes)
                {
                    <option value="@size.Basetype">@size.Basetype</option>
                }
            </select>
        </div>

        <div>
            <h4>Frosting or Fondant</h4>
            <input type="radio" id="html" name="frostingfondant" @onclick=" () => isFrosting = false">
            <label for="html">Fondant</label><br>
            <input type="radio" id="css" name="frostingfondant" @onclick="()=> isFrosting = true">
            <label for="css">Frosting</label><br>
        </div>

        @if (isFrosting)
        {

            <div>
                <label>What frosting flavor do you want</label>
                <select @onchange="(e) => OnFrostingChange(e, iterator)">
                    <option>---</option>
                    @foreach (Addon frosting in frostings)
                    {
                        @if (frosting.Addonflavor is not null)
                        {
                            <option value="@frosting.Addonflavor.Flavor"> @frosting.Addonflavor.Flavor </option>
                        }
                    }
                </select>
            </div>
        }

        <div>
            <label>What flavor of cake do you want</label>
            <select @onchange="(e) => OnFlavorChange(e, iterator)">
                <option>---</option>
                @foreach (Addon cake in sheetFlavors)
                {
                    @if (cake.Addonflavor is not null)
                    {
                        <option value="@cake.Addonflavor.Flavor">@cake.Addonflavor.Flavor</option>
                    }
                }
            </select>
        </div>

        <div>
            <label>Any flavored fillings? </label>
            <select @onchange="(e) => OnFillingChange(e, iterator)">
                <option>---</option>
                @foreach (Addon filling in fillings)
                {
                    @if (filling.Addonflavor is not null)
                    {
                        <option value="@filling.Addonflavor.Flavor">@filling.Addonflavor.Flavor</option>
                    }
                }
            </select>
        </div>

        <div>
            <input @bind-value="description" rows="4" cols="50" placeholder="Words or other features" />
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="async () => { await SheetCake.HideAsync(); }">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick='async () => { await addToCart(" sheetCake");}'>Add To Cart</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="RoundCake" Title="Customize Your Round Cake">
    <BodyTemplate>
        <div>
            <label>How many layers</label>
            <input @onchange="LayersChanged" type="number" />
        </div>

        @for (int i = 0; i < layers; i++)
        {
            int iterator = i+1;
            <div>
                <label>What diameter do you want for layer @(iterator)</label>
                <select @onchange="(e) => OnSizeChange(e, iterator)">
                    <option>---</option>
                    @foreach (Addontype size in cakeSizes)
                    {
                        <option value="@size.Basetype">@size.Basetype</option>
                    }
                </select>
            </div>

            <div>
                <label>Frosting or Fondant</label>
                <input type="radio" id="html" name="frostingfondant" @onclick=" () => isFrosting = false">
                <label for="html">Fondant</label>
                <input type="radio" id="css" name="frostingfondant" @onclick="()=> isFrosting = true" checked>
                <label for="css">Frosting</label>
            </div>

            @if (isFrosting)
            {
                <div>
                    <label>What frosting flavor do you want for layer @(iterator)</label>
                    <select @onchange="(e) => OnSizeChange(e, iterator)">
                        <option>---</option>
                        @foreach (Addon frosting in frostings)
                        {
                            @if (frosting.Addonflavor is not null)
                            {
                                <option value="@frosting.Addonflavor.Flavor"> @frosting.Addonflavor.Flavor </option>
                            }
                        }
                    </select>
                </div>
            }

            <div>
                <label>What flavor of cake do you want for layer @(iterator)</label>
                <select @onchange="(e) => OnSizeChange(e, iterator)">
                    <option>---</option>
                    @foreach (Addon cake in cakeFlavors)
                    {
                        @if (cake.Addonflavor is not null)
                        {
                            <option value="@cake.Addonflavor.Flavor">@cake.Addonflavor.Flavor</option>
                        }
                    }
                </select>
            </div>

            <div>
                @if (layers > 1)
                {
                    <label>Any flavored fillings between layers @(iterator) and @(iterator + 1)</label>

                    <select @onchange="(e) => OnSizeChange(e, iterator)">
                        <option>---</option>
                        @foreach (Addon filling in fillings)
                        {
                            @if (filling.Addonflavor is not null)
                            {
                                <option value="@filling.Addonflavor.Flavor">@filling.Addonflavor.Flavor</option>
                            }
                        }
                    </select>
                }
                else
                {
                    <label>Any flavored filling?</label>
                    <select @onchange="(e) => OnSizeChange(e, iterator)">
                        <option>---</option>

                        @foreach (Addon filling in fillings)
                        {
                            @if (filling.Addonflavor is not null)
                            {
                                <option value="@filling.Addonflavor.Flavor">@filling.Addonflavor.Flavor</option>
                            }
                        }
                    </select>
                }
            </div>

            <hr />

        }
        

        <div>
            <input type="textarea" @bind-value="description" rows="4" cols="50" placeholder="Words or other features" />
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="async () => { await RoundCake.HideAsync(); }">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick='async () => { await addToCart(" sheetCake");}'>Add To Cart</Button>
    </FooterTemplate>
</Modal>

@code {
    int iterator = 1;
    int layers = 1;
    int quantity = 1;
    bool isFrosting = true;
    string? description;

    Modal WeddingCake = new Modal();
    Modal Cupcake = new Modal();
    Modal SheetCake = new Modal();
    Modal RoundCake = new Modal();

    List<Addon>? addons;
    List<Addonflavor>? flavors;
    List<Addontype>? types;

    List<Addon> frostings = new(); //
    List<Addon> fillings = new(); //
    List<Addon> fondant = new();
    List<Addontype> cakeSizes = new();
    List<Addon> cakeFlavors = new();
    List<Addontype> sheetSizes = new();
    List<Addon> sheetFlavors = new();
    List<Addon> cupcakeFlavors = new();

    List<string> sizeList = new();
    List<string> frostingList = new();
    List<string> fillingList = new();
    List<string> flavorList = new();

    private void LayersChanged(ChangeEventArgs e)
    {
        var layerString = e.Value?.ToString();
        if (!string.IsNullOrEmpty(layerString))
        {
            layers =  Int32.Parse(layerString);
        }

        sizeList.Clear();
        frostingList.Clear();
        fillingList.Clear();
        flavorList.Clear();
    }

    private void OnSizeChange(ChangeEventArgs e, int layer)
    {
        var selectedSize = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedSize) && sizeList.Count < layer)
        {
            sizeList.Add(selectedSize);
        }
        else if (!string.IsNullOrEmpty(selectedSize) && sizeList.Count >= layer)
        {
            sizeList[layer - 1] = selectedSize;
        }
        else
        {
            throw new Exception("null value or index out of range");
        }
    }

    private void OnFlavorChange(ChangeEventArgs e, int layer)
    {
        var selectedSize = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedSize) && flavorList.Count < layer)
        {
            flavorList.Add(selectedSize);
        }
        else if (!string.IsNullOrEmpty(selectedSize) && sizeList.Count >= layer)
        {
            flavorList[layer - 1] = selectedSize;
        }
        else
        {
            throw new Exception("null value or index out of range");
        }
    }

    private void OnFillingChange(ChangeEventArgs e, int layer)
    {
        var selectedSize = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedSize) && fillingList.Count < layer)
        {
            fillingList.Add(selectedSize);
        }
        else if (!string.IsNullOrEmpty(selectedSize) && fillingList.Count >= layer)
        {
            fillingList[layer - 1] = selectedSize;
        }
        else
        {
            throw new Exception("null value or index out of range");
        }
    }

    private void OnFrostingChange(ChangeEventArgs e, int layer)
    {
        var selectedSize = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedSize) && frostingList.Count < layer)
        {
            frostingList.Add(selectedSize);
        }
        else if (!string.IsNullOrEmpty(selectedSize) && frostingList.Count >= layer)
        {
            frostingList[layer - 1] = selectedSize;
        }
        else
        {
            throw new Exception("null value or index out of range");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetNeededData();
        await PopulateLists();
    }


    private async Task GetNeededData()
    {
        addons = await addon.GetAddonListAsync();
        flavors = await addonflavor.GetAddonFlavorListAsync();
        types = await addontype.GetAddonTypeListAsync();
    }

    private async Task PopulateLists()
    {

        // figure out way for cake/sheet size
        for (int i = 0; i <= 2; i++)
        {
            var addonType = await addontype.GetAddonTypeAsync(i + 4);
            if (addonType is not null)
            {
                cakeSizes.Add(addonType);
            }

            var sheetType = await addontype.GetAddonTypeAsync(i + 7);
            if (sheetType is not null)
            {
                sheetSizes.Add(sheetType);
            }
        }

        PopulateFlavors();
    }


    private void PopulateFlavors()
    {
        //figure out more long term solution, but for now this works
        if (addons is not null)
        {
            foreach (Addon addon in addons)
            {
                if (addon.Addontypeid == 1)
                    frostings.Add(addon);

                if (addon.Addontypeid == 2)
                    fillings.Add(addon);

                if (addon.Addontypeid == 3)
                    fondant.Add(addon);

                if (addon.Addontypeid == 4)
                    cakeFlavors.Add(addon);

                if (addon.Addontypeid == 7)
                    sheetFlavors.Add(addon);

                if (addon.Addontypeid == 10)
                    cupcakeFlavors.Add(addon);
            }
        }
        else throw new Exception("Unable to find any addons");
    }

    private async Task addToCart(string type)
    {
        Product prodToAdd = new()
            {
                Description = description,
                Productname = type // find some way to make this unique
            };
        await product.CreateProductAsync(prodToAdd);

        foreach (string item in frostingList)
        {
            var frosting = frostings.Find(f => f.Addonflavor!.Flavor == item);
            //    await prod_basegood_addon.CreateProductAddonBasegoodAsync(new() { Productid = prodToAdd.Id, Addonid = frostings.Find(f => f.Addonflavor!.Flavor == cupcakeFrosting)!.Id, Basegoodid = 53 });
            if (frosting is not null)
                await AddAddon(prodToAdd.Id, frosting.Id);

        }
            frostingList.Clear();

        foreach (string item in sizeList)
        {
            var frosting = frostings.Find(f => f.Addonflavor!.Flavor == item);
            //    await prod_basegood_addon.CreateProductAddonBasegoodAsync(new() { Productid = prodToAdd.Id, Addonid = frostings.Find(f => f.Addonflavor!.Flavor == cupcakeFrosting)!.Id, Basegoodid = 53 });
            if (frosting is not null)
                await AddAddon(prodToAdd.Id, frosting.Id);

        }
            sizeList.Clear();

        foreach (string item in fillingList)
        {
            var filling = fillings.Find(f => f.Addonflavor!.Flavor == item);

            if (filling is not null)
                await AddAddon(prodToAdd.Id, filling.Id);

            //     await prod_basegood_addon.CreateProductAddonBasegoodAsync(new() { Productid = prodToAdd.Id, Addonid = fillings.Find(f => f.Addonflavor!.Flavor == cupcakeFilling)!.Id, Basegoodid = 53 });
        }
            fillingList.Clear();

        foreach (string item in frostingList)
        {
            var filling = fillings.Find(f => f.Addonflavor!.Flavor == item);

            if (filling is not null)
                await AddAddon(prodToAdd.Id, filling.Id);
            //     await prod_basegood_addon.CreateProductAddonBasegoodAsync(new() { Productid = prodToAdd.Id, Addonid = cakeFlavors.Find(f => f.Addonflavor!.Flavor == cupcakeFlavor)!.Id, Basegoodid = 53 });
        }
            frostingList.Clear();
        //TODO: get customer ID
        // Once we get the CustomerId, uncomment this
        //await AddToCart(prodToAdd.Id, cupcakeDozens, customerId);

        //await cart.CreateCartAsync(new() { Productid = prodToAdd.Id, Quantity = cupcakeDozens, Customerid = });

        await Cupcake.HideAsync();
    }

    public async Task AddAddon(int productId, int addonId)
    {
        await prod_basegood_addon.CreateProductAddonBasegoodAsync(new() { Productid = productId, Addonid = addonId, Basegoodid = 53 });
    }

    public async Task AddToCart(int productId, int quantity, int customerId)
    {
        await cart.CreateCartAsync(new() { Productid = productId, Quantity = quantity, Customerid = customerId });
    }

}
