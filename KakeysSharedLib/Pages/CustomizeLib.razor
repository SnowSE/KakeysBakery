@page "/Customize"

@using KakeysSharedLib.Data
@using KakeysSharedLib.Services.Interfaces
@using KakeysSharedLib.Telemetry
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@using BlazorBootstrap
@using Microsoft.Extensions.Logging
@using TextCopy
@using KakeysSharedLib.OAuth
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Json;

@inject IAddonService addon
@inject IBaseGoodService basegood
@inject IAddonTypeService addontype
@inject IAddonFlavorService addonflavor
@inject IProductService product
@inject ICustomerService customer
@inject IProductAddonBasegoodService prod_basegood_addon
@inject ICartService cart
@inject IAuthenticationManager authManager
@inject NavigationManager navManager
@inject HttpClient client
@inject ILogger<CustomizeLib> logger

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />

<div>
    <div class="my-5">
        <Alert class="mb-0 rounded" Color="AlertColor.Warning">
            <i class="bi bi-info-circle-fill" />
            This form is for pastries with a small to medium amount of customization. 
            If you wish for a highly customized cake or a cake with lots of detail, 
            please contact me directly at <a href="mailto:kakeysbakery@yahoo.com"> kakeysbakery@yahoo.com</a>
        </Alert>
    </div>

    <div>
        <div class="totalPage">
            <div class="d-flex flex-wrap justify-content-center">

                <div class="d-flex position-relative order-container rounded-5 m-3 p-3" @onclick="async ()=>await WeddingCake.ShowAsync()">
                    <img src="https://kakeybakerystorage9.blob.core.windows.net/bakerybasics/weddingcake.jpg" class="imgbutton img-fluid img-thumbnail rounded-5 shadow">
                    <h3 class="typelabel" style="z-index: 1;">Wedding Cake</h3>
                </div>
                <div class="d-flex position-relative order-container rounded-5 m-3 p-3" @onclick="async ()=> {await Cupcake.ShowAsync(); layers=1;}">
                    <img src="https://kakeybakerystorage9.blob.core.windows.net/bakerybasics/cupcakes.jpg" class="imgbutton img-fluid img-thumbnail rounded-5 shadow">
                    <h3 class="typelabel" style="z-index: 1;">Cupcake</h3>
                </div>
                <div class="d-flex position-relative order-container rounded-5 m-3 p-3" @onclick="async ()=> {await RoundCake.ShowAsync(); layers=1;}">
                    <img src="https://kakeybakerystorage9.blob.core.windows.net/bakerybasics/customcake.jpg" class="imgbutton img-fluid img-thumbnail rounded-5 shadow">
                    <h3 class="typelabel" style="z-index: 1;">Round Cake</h3>
                </div>
                <div class="d-flex position-relative order-container rounded-5 m-3 p-3 " @onclick="async ()=> {await SheetCake.ShowAsync(); layers=1;}">
                    <img src="https://kakeybakerystorage9.blob.core.windows.net/bakerybasics/Sheetcake.jpg" class="imgbutton img-fluid img-thumbnail rounded-5 shadow">
                    <h3 class="typelabel" style="z-index: 1;">Sheet Cake</h3>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .modal-header i {
        margin-left: auto !important;
    }
</style>

<Modal @ref="WeddingCake" Title="Wedding Cake">
    <BodyTemplate>
        <p>Sorry, at this time I do not accept customizing wedding cakes online. If you wish to order a wedding cake from me, you can contact me at <a href="mailto:kakeysbakery@yahoo.com">kakeysbakery@yahoo.com</a> or <a href="tel:8017214703">(801) 721-4703</a> anytime to set up a consultation and I will get back with you as soon as I can.</p>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick='async () => { await WeddingCake.HideAsync(); await ClipboardService.SetTextAsync("8017214703"); CreateToastMessage(ToastType.Success, "Copied to Clipboard!");}'>Copy Phone to Clipboard</Button>
        <Button Color="ButtonColor.Primary" @onclick='async () => { await WeddingCake.HideAsync(); await ClipboardService.SetTextAsync("kakeysbakery@yahoo.com"); CreateToastMessage(ToastType.Success, "Copied to Clipboard!");}'>Copy Email to Clipboard</Button>
        <Button Color="ButtonColor.Secondary" @onclick="async () => { await WeddingCake.HideAsync(); }">Close</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="Cupcake" Title="Customize a Cupcake">
    <BodyTemplate>
        <table class="table table-borderless">
            <tbody>
                @if (warnNotLoggedIn is not null)
                {
                    <tr>
                        <td>
                            <label style="color: red; font-weight: bold;">@warnNotLoggedIn</label>
                        </td>
                    </tr>
                }
                <tr>
                    <td>
                        <label>What frosting flavor do you want</label>
                    </td>
                    <td>
                        <select class="form-select" @onchange="(e) => DropDownChanged(e, iterator, frostingList)">
                            <option>---</option>
                            @foreach (Addon frosting in frostings)
                            {
                                @if (frosting.Addonflavor is not null)
                                {
                                    <option value="@frosting.Addonflavor.Flavor"> @frosting.Addonflavor.Flavor </option>
                                }
                            }
                        </select>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label>What flavor of cupcake do you want</label>
                    </td>
                    <td>
                        <select class="form-select" @onchange="(e) => DropDownChanged(e, iterator, flavorList)">
                            <option>---</option>
                            @foreach (Addon cake in cupcakeFlavors)
                            {
                                @if (cake.Addonflavor is not null)
                                {
                                    <option value="@cake.Addonflavor.Flavor"> @cake.Addonflavor.Flavor</option>
                                }
                            }
                        </select>
                    </td>
                </tr>
                <tr>

                    <td>
                        <label>Any flavored fillings</label>
                    </td>
                    <td>
                        <select class="form-select" @onchange="(e) => DropDownChanged(e, iterator, fillingList)">
                            <option>---</option>
                            @foreach (Addon filling in fillings)
                            {
                                @if (filling.Addonflavor is not null)
                                {
                                    <option value="@filling.Addonflavor.Flavor">@filling.Addonflavor.Flavor</option>
                                }

                            }
                        </select>
                    </td>
                </tr>
                <tr>

                    <td>
                        <label>Count (in Dozens)</label>
                    </td>
                    <td>
                        <input class="form-control" type="number" @bind-value="quantity" />
                    </td>
                </tr>

                <tr>

                    <div>
                        <input rows="4" cols="50" @bind-value="description" placeholder="What additional customization do you want with this cupcake?" />
                    </div>
                </tr>
            </tbody>
        </table>
        @if (validationString is not null)
        {
            <p style="color: red; font-weight: bold;">@validationString</p>

        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary " @onclick="async () => { await Cupcake.HideAsync(); }">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick='async () => { await addToCart(" cupcake");}'> Add To Cart</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="SheetCake" Title="Customize Your Sheet Cake">
    <BodyTemplate>
        <table class="table table-borderless">
            <tbody>
                @if (warnNotLoggedIn is not null)
                {
                    <tr>
                        <td>
                            <label style="color: red; font-weight: bold;">@warnNotLoggedIn</label>
                        </td>
                    </tr>
                }
                <tr>
                    <td>

                        <label>What size do you want</label>
                    </td>
                    <td>
                        <select class="form-select" @onchange="(e) => DropDownChanged(e, iterator, sizeList)">
                            <option>---</option>
                            @foreach (Addontype size in sheetSizes)
                            {
                                <option value="@size.Basetype">@size.Basetype</option>
                            }
                        </select>
                    </td>
                </tr>
                <tr>
                    <td>
                        <input type="radio" id="html" name="frostingfondant" @onclick=" () => isFondant[0] = false">
                        <label for="html">Fondant</label><br>
                        <input type="radio" id="css" name="frostingfondant" @onclick="()=> isFondant[0]= true">
                        <label for="css">Frosting</label><br>
                    </td>
                </tr>


                <tr>
                    @if (isFondant[0])
                    {

                        <td>
                            <label>What frosting flavor do you want</label>
                        </td>
                        <td>
                            <select class="form-select" @onchange="(e) => DropDownChanged(e, iterator, frostingList)">
                                <option>---</option>
                                @foreach (Addon frosting in frostings)
                                {
                                    @if (frosting.Addonflavor is not null)
                                    {
                                        <option value="@frosting.Addonflavor.Flavor"> @frosting.Addonflavor.Flavor </option>
                                    }
                                }
                            </select>
                        </td>
                    }
                </tr>

                <tr>
                    <td>
                        <label>What flavor of cake do you want</label>
                    </td>
                    <td>
                        <select class="form-select" @onchange="(e) => DropDownChanged(e, iterator, flavorList)">
                            <option>---</option>
                            @foreach (Addon cake in sheetFlavors)
                            {
                                @if (cake.Addonflavor is not null)
                                {
                                    <option value="@cake.Addonflavor.Flavor">@cake.Addonflavor.Flavor</option>
                                }
                            }
                        </select>
                    </td>
                </tr>

                <tr>
                    <td>
                        <label>Any flavored fillings? </label>
                    </td>

                    <td>
                        <select class="form-select" @onchange="(e) => DropDownChanged(e, iterator, fillingList)">
                            <option>---</option>
                            @foreach (Addon filling in fillings)
                            {
                                @if (filling.Addonflavor is not null)
                                {
                                    <option value="@filling.Addonflavor.Flavor">@filling.Addonflavor.Flavor</option>
                                }
                            }
                        </select>
                    </td>
                </tr>

                <tr>
                    <input @bind-value="description" rows="4" cols="50" placeholder="Words or other features" />
                </tr>
            </tbody>
        </table>
        @if (validationString is not null)
        {
            <p style="color: red; font-weight: bold;">@validationString</p>

        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="async () => { await SheetCake.HideAsync(); }">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick='async () => { await addToCart(" Sheet Cake");}'>Add To Cart</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="RoundCake" Title="Customize Your Round Cake">
    <BodyTemplate>
        <table class="table table-borderless">
            <tbody>
                @if (warnNotLoggedIn is not null)
                {
                    <tr>
                        <td>
                            <label style="color: red; font-weight: bold;">@warnNotLoggedIn</label>
                        </td>
                    </tr>
                }
                <tr>
                    <td>
                        <label>How many layers</label> @*max of 4 right now*@
                    </td>

                    <td>
                        <input class="form-control" @onchange="LayersChanged" min="1" max="4" type="number" />
                    </td>
                </tr>
                @for (int i = 0; i < layers; i++)
                {
                    int iterator = i;
                    <tr>
                        <td>

                            <label>What diameter do you want for layer @(iterator + 1 )</label>
                        </td>
                        <td>
                            <select class="form-select" @onchange="(e) => DropDownChanged(e, iterator +1, sizeList)">
                                <option>---</option>
                                @foreach (Addontype size in cakeSizes)
                                {
                                    <option value="@size.Basetype">@size.Basetype</option>
                                }
                            </select>
                        </td>
                    </tr>

                    <tr>
                        <td>
                            <form>
                                <input type="radio" id="html" name="frostingfondant" @onclick=" () => isFondant[iterator] = false">
                                <label for="html">Fondant</label><br>
                                <input type="radio" id="css" name="frostingfondant" @onclick="()=> isFondant[iterator] = true" checked>
                                <label for="css">Frosting</label><br>
                            </form>
                        </td>
                    </tr>


                    <tr>
                        @if (isFondant[iterator] == true)
                        {
                            <td>
                                <label>What frosting flavor do you want</label>
                            </td>
                            <td>
                                <select class="form-select" @onchange="(e) => DropDownChanged(e, iterator +1, frostingList)">
                                    <option>---</option>
                                    @foreach (Addon frosting in frostings)
                                    {
                                        @if (frosting.Addonflavor is not null)
                                        {
                                            <option value="@frosting.Addonflavor.Flavor"> @frosting.Addonflavor.Flavor </option>
                                        }
                                    }
                                </select>
                            </td>
                        }
                    </tr>
                    <tr>
                        <td>

                            <label>What flavor of cake do you want for layer @(iterator + 1)</label>
                        </td>
                        <td>
                            <select class="form-select" @onchange="(e) => DropDownChanged(e, iterator + 1, flavorList)">
                                <option>---</option>
                                @foreach (Addon cake in cakeFlavors)
                                {
                                    @if (cake.Addonflavor is not null)
                                    {
                                        <option value="@cake.Addonflavor.Flavor">@cake.Addonflavor.Flavor</option>
                                    }
                                }
                            </select>
                        </td>
                    </tr>

                    <tr>
                        @if (layers > 1 && i < layers - 1)
                        {
                            <td>
                                <label>Any flavored fillings between layers @(iterator + 1) and @(iterator + 2)</label>
                            </td>
                            <td>
                                <select class="form-select" @onchange="(e) => DropDownChanged(e, iterator +1, fillingList)">
                                    <option>---</option>
                                    @foreach (Addon filling in fillings)
                                    {
                                        @if (filling.Addonflavor is not null)
                                        {
                                            <option value="@filling.Addonflavor.Flavor">@filling.Addonflavor.Flavor</option>
                                        }
                                    }
                                </select>
                            </td>
                        }
                        else if (layers == 1)
                        {
                            <td>

                                <label>Any flavored filling?</label>
                            </td>
                            <td>
                                <select class="form-select" @onchange="(e) => DropDownChanged(e, iterator + 1, fillingList)">
                                    <option>---</option>

                                    @foreach (Addon filling in fillings)
                                    {
                                        @if (filling.Addonflavor is not null)
                                        {
                                            <option value="@filling.Addonflavor.Flavor">@filling.Addonflavor.Flavor</option>
                                        }
                                    }
                                </select>
                            </td>
                        }
                    </tr>
                    <hr />
                }
                <tr>
                    <div>
                        <input type="textarea" @bind-value="description" rows="4" cols="50" placeholder="Words or other features" />
                    </div>
                </tr>
            </tbody>
        </table>
        @if (validationString is not null)
        {
            <p style="color: red; font-weight: bold;">@validationString</p>

        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="async () => { await RoundCake.HideAsync(); }">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick='async () => { await addToCart(" Round Cake");}'>Add To Cart</Button>
    </FooterTemplate>
</Modal>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    List<ToastMessage> messages = new List<ToastMessage>();
    int iterator = 1;
    int layers = 1;
    int quantity = 1;
    //bool isFrosting = true;
    string? description;
    string? validationString;
    string? warnNotLoggedIn;

    Modal WeddingCake = new Modal();
    Modal Cupcake = new Modal();
    Modal SheetCake = new Modal();
    Modal RoundCake = new Modal();

    List<Addon>? addons;
    List<Addonflavor>? flavors;
    List<Addontype>? types;

    List<Addon> frostings = new(); //
    List<Addon> fillings = new(); //
    List<Addon> fondant = new();
    List<Addontype> cakeSizes = new();
    List<Addon> cakeFlavors = new();
    List<Addontype> sheetSizes = new();
    List<Addon> sheetFlavors = new();
    List<Addon> cupcakeFlavors = new();

    List<string> sizeList = new();
    List<bool> isFondant = new();
    List<string> frostingList = new();
    List<string> fillingList = new();
    List<string> flavorList = new();

    private void CreateToastMessage(ToastType type, string message)
    {
        messages.Add(
            new ToastMessage
                {
                    Type = type,
                    Message = message,
                    AutoHide = true
                });
    }

    private void LayersChanged(ChangeEventArgs e)
    {
        var layerString = e.Value?.ToString();
        if (!string.IsNullOrEmpty(layerString))
        {
            layers = Int32.Parse(layerString);
        }
        ResetLists();
        for(int i = 0; i < layers; i++)
        {
            isFondant.Add(true);  
        }
    }

    private void ResetLists()
    {
        logger.LogInformation("Resetting all of the populated lists");
        isFondant.Clear();
        sizeList.Clear();
        frostingList.Clear();
        fillingList.Clear();
        flavorList.Clear();
    }

    private void DropDownChanged(ChangeEventArgs e, int layer, List<string> ListAddedTo)
    {
        if (layer > 4)
        {
            layers = 4;
            validationString = "We do not offer more than 4 layers at this moment";
            return;
        }

        var selectedSize = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedSize) && ListAddedTo.Count < layer)
        {
            ListAddedTo.Add(selectedSize);
        }
        else if (!string.IsNullOrEmpty(selectedSize) && ListAddedTo.Count >= layer)
        {
            ListAddedTo[layer - 1] = selectedSize;
        }
        else
        {
            throw new Exception("null value or index out of range");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation("Loading the customize page");
        isFondant.Add(true);
        await GetNeededData();
        await PopulateLists();
        await authManager.SetAuthState(authenticationState);
        if (!(await authManager!.IsUserLoggedIn())) warnNotLoggedIn = "You are not logged in, changes to cart will not be saved";
        Metrics.CustomizeAccessCount.Add(1);
    }


    private async Task GetNeededData()
    {
        addons = await addon.GetAddonListAsync();
        flavors = await addonflavor.GetAddonFlavorListAsync();
        types = await addontype.GetAddonTypeListAsync();
    }

    private async Task PopulateLists()
    {

        logger.LogInformation("Populating the lists");
        // figure out way for cake/sheet size
        for (int i = 0; i <= 2; i++)
        {
            var addonType = await addontype.GetAddonTypeAsync(i + 4);
            if (addonType is not null)
            {
                cakeSizes.Add(addonType);
            }

            var sheetType = await addontype.GetAddonTypeAsync(i + 7);
            if (sheetType is not null)
            {
                sheetSizes.Add(sheetType);
            }
        }

        PopulateFlavors();
    }


    private void PopulateFlavors()
    {
        logger.LogInformation("populating flavors");
        //figure out more long term solution, but for now this works
        if (addons is not null)
        {
            foreach (Addon addon in addons)
            {
                if (addon.Addontypeid == 1)
                    frostings.Add(addon);

                if (addon.Addontypeid == 2)
                    fillings.Add(addon);

                if (addon.Addontypeid == 3)
                    fondant.Add(addon);

                if (addon.Addontypeid == 4)
                    cakeFlavors.Add(addon);

                if (addon.Addontypeid == 7)
                    sheetFlavors.Add(addon);

                if (addon.Addontypeid == 10)
                    cupcakeFlavors.Add(addon);
            }
        }
        else throw new Exception("Unable to find any addons");
    }

    private bool IsValidInput()
    {
        logger.LogInformation("Checking for valid input");
        validationString = null;
        if (sizeList.Count < layers)
        {
            validationString += "Could not add to cart: Missing Cake Size Values";
            return false;
        }
        if (frostingList.Count < layers)
        {
            validationString += "Could not add to cart: Missing Frosting Values";
            return false;
        }
        if (flavorList.Count < layers)
        {
            validationString += "Could not add to cart: Missing Flavor Values";
            return false;
        }
        return true;
    }

    private async Task AddToCustomerAddonList(int productId, List<string> customerList, List<Addon> dbList)
    {
        foreach (string item in customerList)
        {
            var frosting = dbList.Find(f => f.Addonflavor!.Flavor == item);
            if (frosting is not null)
                await AddAddon(productId, frosting.Id);
        }
    }

    private async Task AddToCustomerAddonList(int productId, List<string> customerList, List<Addontype> dbList)
    {
        foreach (string item in customerList)
        {
            var frosting = dbList.Find(f => f.Basetype == item);
            if (frosting is not null)
                await AddAddon(productId, frosting.Id);
        }
    }

    private async Task addToCart(string type)
    {
        logger.LogInformation("Adding to cart");
        if (!IsValidInput())
            return;
        if (!(await authManager!.IsUserLoggedIn()))
        {
            navManager.NavigateTo("Account/Login?redirectUri=/Order", forceLoad: true);
            return;
        }
        Product prodToAdd = new()
            {
                Description = description,
                Productname = flavorList[0] + " " + frostingList[0] + " " + type
            };
        await product.CreateProductAsync(prodToAdd);

        await AddToCustomerAddonList(prodToAdd.Id, frostingList, frostings);
        await AddToCustomerAddonList(prodToAdd.Id, fillingList, fillings);

        if (type == " Round Cake")
        {
            await AddToCustomerAddonList(prodToAdd.Id, flavorList, cakeFlavors);
            await AddToCustomerAddonList(prodToAdd.Id, sizeList, cakeSizes);
        }

        if (type == " Sheet Cake")
        {
            await AddToCustomerAddonList(prodToAdd.Id, flavorList, sheetFlavors);
            await AddToCustomerAddonList(prodToAdd.Id, sizeList, sheetSizes);
        }

        if (type == " Cupcake")
        {
            await AddToCustomerAddonList(prodToAdd.Id, flavorList, cupcakeFlavors);

        }

        ResetLists();

        int id = await get_customer_Id();
        await AddToCart(prodToAdd.Id, quantity, id);

        //await cart.CreateCartAsync(new() { Productid = prodToAdd.Id, Quantity = cupcakeDozens, Customerid = });

        await Cupcake.HideAsync();
        await SheetCake.HideAsync();
        await RoundCake.HideAsync();
    }
    private async Task<int> get_customer_Id()
    {
        string email = await authManager.GetUserEmail();
        var customer = await client.GetFromJsonAsync<Customer>($"api/customer/get_by_email/{email}");
        return customer!.Id;
    }

    public async Task AddAddon(int productId, int addonId)
    {
        await prod_basegood_addon.CreateProductAddonBasegoodAsync(new() { Productid = productId, Addonid = addonId, Basegoodid = 53 });
    }

    public async Task AddToCart(int productId, int quantity, int customerId)
    {
        await cart.CreateCartAsync(new() { Productid = productId, Quantity = quantity, Customerid = customerId });
    }

}
