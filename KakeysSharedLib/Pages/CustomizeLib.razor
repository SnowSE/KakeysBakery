@page "/Customize"

@* @using Microsoft.AspNetCore.Components.Authorization *@
@using KakeysSharedLib.Data
@using KakeysSharedLib.Services.Interfaces
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@using BlazorBootstrap

@inject IAddonService addon
@inject IBaseGoodService basegood
@inject IProductService product
@inject ICustomerService customer

<body>
    <h3>This form is for pastries with a small to medium amount of customization. If you wish for a highly customized cake or a cake with lots of detail, please contact me directly [link to contact me]</h3>
    <div class="mt-5 bg-light border vh-100 ">
        <div class="d-flex flex-wrap justify-content-between p-5">

            <div class="p-3 d-flex flex-column" @onclick="async ()=>await WeddingCake.ShowAsync()">
                <img src="images/weddingcake.png" class="imgbutton img-fluid img-thumbnail rounded-5 shadow">
                <p class="text-center">Wedding Cake</p>
            </div>
            <div class="p-3 d-flex flex-column" @onclick="async ()=> await Cupcake.ShowAsync()">
                <img src="images/cupcakes.png" class="imgbutton img-fluid img-thumbnail rounded-5 shadow">
                <p class="text-center">Cupcakes</p>
            </div>
            <div class="p-3 d-flex flex-column " @onclick="async ()=> await RoundCake.ShowAsync()">
                <img src="images/customcake.png" class="imgbutton img-fluid img-thumbnail rounded-5 shadow">
                <p class="text-center">Round Cakes</p>
            </div>
            <div class="p-3 d-flex flex-column " @onclick="async ()=> await SheetCake.ShowAsync()">
                <img src="images/cookie.jpg" class="imgbutton img-fluid img-thumbnail rounded-5 shadow">
                <p class="text-center">Sheet Cakes</p>
            </div>
        </div>
    </div>
</body>

<Modal @ref="WeddingCake" Title="Wedding Cake">
    <BodyTemplate>
        <p>Sorry, at this time I do not accept customizing wedding cakes online. If you wish to order a wedding cake from me, you can contact me at _____ or _____ anytime to set up a consultation and I will get back with you as soon as I can.</p>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="async () => { await WeddingCake.HideAsync(); }">Close</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="Cupcake" Title="Customize a Cupcake">
    <BodyTemplate>
        <div>
            <label>What frosting flavor do you want</label>
            <select>
                <option>---</option>
            </select>
        </div>
        <div>
            <label>What flavor of cake do you want</label>
            <select>
                <option>---</option>
            </select>
        </div>

        <div>
            <label>Any flavored fillings</label>
        </div>

        <div>
            <label>How many do you want</label>
            <input type="number" />
        </div>

        <div>
            <input type="textarea" rows="4" cols="50" placeholder="What additional customization do you want with this cupcake?" />
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary " @onclick="async () => { await Cupcake.HideAsync(); }">Close</Button>
        <Button Color="ButtonColor.Primary">Add To Cart</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="SheetCake" Title="Customize Your Sheet Cake">
    <BodyTemplate>
        <div>
            <label>What size do you want</label>
            <select>
                <option>---</option>
            </select>
        </div>

        <div>
            <h4>Frosting or Fondant</h4>
            <input type="radio" id="html" name="frostingfondant" @onclick=" () => isFrosting = false">
            <label for="html">Fondant</label><br>
            <input type="radio" id="css" name="frostingfondant" @onclick="()=> isFrosting = true">
            <label for="css">Frosting</label><br>
        </div>

        @if (isFrosting)
        {

            <div>
                <label>What frosting flavor do you want</label>
                <select>
                    <option>---</option>
                </select>
            </div>
        }

        <div>
            <label>What flavor of cake do you want</label>
            <select>
                <option>---</option>
            </select>
        </div>

        <div>
            <label>Any flavored fillings? </label>
            <select>
                <option>---</option>
            </select>
        </div>

        <div>
            <input type="textarea" rows="4" cols="50" placeholder="Words or other features" />
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="async () => { await SheetCake.HideAsync(); }">Close</Button>
        <Button Color="ButtonColor.Primary">Add To Cart</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="RoundCake" Title="Customize Your Round Cake">
    <BodyTemplate>
        <div>
            <label>How many layers</label>
            <input @bind="layers" type="number"/>
        </div>

        @for (int i = 0; i < layers; i++)
        {
            
        <div>
            <label>What diameter do you want for layer @i</label>
            <select>
                <option>---</option>
            </select>
        </div>

        <div>
            <label>Frosting or Fondant</label>
            <input type="radio" id="html" name="frostingfondant" @onclick=" () => isFrosting = false">
            <label for="html">Fondant</label>
            <input type="radio" id="css" name="frostingfondant" @onclick="()=> isFrosting = true">
            <label for="css">Frosting</label>
        </div>

        @if (isFrosting)
        {
            <div>
                <label>What frosting flavor do you want for layer @i</label>
                <select>
                    <option>---</option>
                </select>
            </div>
        }

        <div>
            <label>What flavor of cake do you want for layer @i</label>
            <select>
                <option>---</option>
            </select>
        </div>

        <div>
                @if(layers > 1)
                {
                    <label>Any flavored fillings between layers @(i+1) and @(i+2)</label>
                }
                else
                {
                    <label>Any flavored filling?</label>
                }
                <select>
                <option>---</option>
            </select>
        </div>

        <hr/>
        }
        

        <div>
            <input type="textarea" rows="4" cols="50" placeholder="Words or other features" />
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="async () => { await RoundCake.HideAsync(); }">Close</Button>
        <Button Color="ButtonColor.Primary">Add To Cart</Button>
    </FooterTemplate>
</Modal>

@code {
    int layers = 1;
    bool isFrosting = false;
    Modal WeddingCake = new Modal();
    Modal Cupcake = new Modal();
    Modal SheetCake = new Modal();
    Modal RoundCake = new Modal();

    List<Addon> addons;
    List<Addonflavor> flavors;

    protected async override Task OnInitializedAsync()
    {
        addons = await addon.GetAddonListAsync();

    }
}
