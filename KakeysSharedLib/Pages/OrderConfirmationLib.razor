@page "/Confirmation"


@using System.Net.Http.Json
@using KakeysSharedLib.Data
@using KakeysSharedLib.OAuth
@using KakeysSharedLib.Services.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Logging
@inject ICustomerService customer
@inject IAuthenticationManager authManager
@inject HttpClient client
@inject NavigationManager navManager
@inject ILogger<OrderConfirmationLib> logger

@if (currentCustomer is not null)
{
<div class="p-5 bg-light">
<h2 class="text-center">Thank you @currentCustomer.Forename! for placing an order at Kakey's Bakery!</h2>
<p class="text-center">I will get in contact with you shortly to go over your order in more detail using @currentCustomer.Email. You can expect an email from me within 5 buisness days</p>
</div>
}

<div>
    <span>
        <label>Would you like to keep in contact with me for news, promotions and other information? If so sign up for my mailing list</label>
        <input @onchange="async () => subscribe = await updateSubscribe(!subscribe)" type="checkbox" checked="@subscribe">
    </span>
    <p></p>
    <span>
        <label>Input a phone number here to recieve notifications about your order status.</label>
        <input @bind="@PhoneNumber" maxlength="14"  placeholder="555-555-5555"/>
    </span>
    <button @onclick="async () => await updatePhone()">Update Phone Number</button>

</div>

@code {
    private bool subscribe;
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private string email = "";
    private string? PhoneNumber;
    Data.Customer? currentCustomer = new();
    //List<ToastMessage> messages = new List<ToastMessage>();
    //Data.Customer? currentCustomer = new();
    List<Cart>? allCartItemsForCustomer = new();

    protected override async Task OnInitializedAsync()
    {
        await authManager.SetAuthState(authenticationState);
        email = await authManager.GetUserEmail();

        currentCustomer = await client.GetFromJsonAsync<Data.Customer>($"api/customer/get_by_email/{email}");

        subscribe = currentCustomer!.Issubscribed ?? false;

        currentCustomer = await client.GetFromJsonAsync<Data.Customer>($"api/customer/get_by_email/{email}");
        var products = await client.GetFromJsonAsync<List<Product>>("api/product/getall");

        //get the cart and then filter itself to only get items connected to the current customer
        allCartItemsForCustomer = await client.GetFromJsonAsync<List<KakeysSharedLib.Data.Cart>>("api/cart/getall");
        allCartItemsForCustomer = allCartItemsForCustomer!.Where(i => i.Customerid == currentCustomer!.Id).ToList();
        List<ProductAddonBasegood>? PABs = await client.GetFromJsonAsync<List<ProductAddonBasegood>>("api/productAddonBasegood/getall");
        List<Basegood>? basegoods = await client.GetFromJsonAsync<List<Basegood>>("api/Basegood/getall");
        List<Addon>? addons = await client.GetFromJsonAsync<List<Addon>>("api/Addon/getall");
        List<Basegoodtype>? types = await client.GetFromJsonAsync<List<Basegoodtype>>("api/Basegoodtype/getall");

        if (paymentSuccess.didPaymentGoThrough)
            await CheckoutCart(currentCustomer!.Id);
    }
    private async Task updatePhone()
    {
        currentCustomer!.Phone = PhoneNumber;
        await client.PatchAsJsonAsync("api/customer/update", currentCustomer);
    }

    private async Task<bool> updateSubscribe(bool subscribed)
    {
        currentCustomer!.Issubscribed = subscribed;
        await client.PatchAsJsonAsync("api/customer/update", currentCustomer);
        return currentCustomer.Issubscribed ?? subscribed;
    }

    private async Task updateLocalCartToDatabaseAsync(List<Cart> carts)
    {
        logger.LogInformation("Updating cart in the database");
        foreach (var cart in carts)
        {
            var skinnyCart = cart;
            skinnyCart.Product = null;
            skinnyCart.Customer = null;

            await client.PatchAsJsonAsync("api/cart/update", cart);
        }
        paymentSuccess.didPaymentGoThrough = false;
    }

    public async Task CheckoutCart(int customerId)
    {
        logger.LogInformation("Checking out cart");

        if (allCartItemsForCustomer!.Count < 1)
        {
            //CreateToastMessage(ToastType.Danger, "No items in cart");
            return;
        }
        await updateLocalCartToDatabaseAsync(allCartItemsForCustomer!);

        //TODO: ADD PAY PALL Logic and redirection HERE

        int purchaseId = await client.GetFromJsonAsync<int>($"api/cart/CheckoutLogic/{customerId}");
        if (purchaseId > 0)
        {
            allCartItemsForCustomer = new();
            //CreateToastMessage(ToastType.Success, "Success!");
            StateHasChanged();
        }
        else //It failed and returned an invalid purchaseID
        {
            //CreateToastMessage(ToastType.Danger, "Error occured when checking out");
        }
    }
}