@page "/Order"

@using BlazorBootstrap
@using KakeysSharedLib.Components
@using KakeysSharedLib.OAuth
@* @using Microsoft.AspNetCore.Components.Authorization *@
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@using System.Net.Http.Json
@using KakeysSharedLib.Data

@inject NavigationManager navManager
@inject HttpClient client
@inject IAuthenticationManager authManager

<h3 class="pageTitle">Order</h3>
@if (IsDataLoaded)
{
    <Modal @ref="modal" Title="Customize Your Order">
        <BodyTemplate>
            <div class="Modal">
                <table class="table table-borderless">
                    <tbody>
                        <tr>
                            <td>
                                <label>Choose @manager!.AvailableGoodTypes?.Where(c => c.Id == manager.CurrentGoodTypeId).First()?.Basegood Type:</label>
                            </td>
                            <td>
                                <select class="form-select" name="flavor" @onchange="manager.UpdateSelection" id="box">
                                    <option> --- </option>
                                    @if (manager.CurrentDetails.Count > 0)
                                    {
                                        @foreach (Basegood basegood in manager.CurrentDetails)
                                        {
                                            @if (basegood.Isavailable ?? false)
                                            {
                                                <option value="@basegood.Flavor?.Id">@basegood.Flavor?.Flavorname</option>
                                            }
                                        }
                                    }
                                </select>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <label>Quantity:</label>
                            </td>
                            <td>
                                <div class="InputBox">
                                    <input class="form-control" min="1" type="number" @bind="manager.Quantity" id="box" />
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>

                <hr />
                <h5>Total: $@(manager.Selected?.Suggestedprice * manager.Quantity)</h5>
            </div>
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Secondary" @onclick="async () => { await modal.HideAsync(); }">Close</Button>
            <Button Color="ButtonColor.Primary" @onclick="async () => { await AddToCart(); }">Add To Cart</Button>
        </FooterTemplate>
    </Modal>

    <div class="mt-5 border totalPage">
        <div class="d-flex flex-wrap justify-content-center">
            @if (manager!.AvailableGoodTypes == null)
            {
                <p>Loading products, please wait</p>
            }
            else
            {
                @foreach (Basegoodtype type in manager.AvailableGoodTypes)
                {
                    <div class="d-flex position-relative order-container rounded-5 m-3 p-3" @onclick="async () => { await manager.SelectGoodTypeCard(type.Id); await modal.ShowAsync(); }">
                        <h3 class="typelabel" style="z-index: 1;">@type.Basegood</h3>
                        @* <img class="imgbutton img-fluid shadow rounded-5 img-thumbnail" src="images/@(type.Basegood).jpg"> *@
                        <img class="imgbutton img-fluid shadow rounded-5 img-thumbnail" src="https://kakeybakerystorage9.blob.core.windows.net/bakerybasics/@(type.Basegood).jpg">

                    </div>
                }
            }
        </div>
    </div>
}
else
{
    <p>Hehe</p>
}

@code {
    // [CascadingParameter]
    // private Task<AuthenticationState>? authenticationState { get; set; }
    private Modal modal = default!;
    bool IsDataLoaded = false;

    CartManager? manager;

    protected override async Task OnInitializedAsync()
    {
        client.BaseAddress = new Uri(navManager.BaseUri);

        manager = new(client);
        await manager.PopulateAvailableGoodTypes();

        // await authManager.SetAuthState(authenticationState);
        IsDataLoaded = true;
    }

    public async Task AddToCart()
    {
        // if (!(await authManager!.IsUserLoggedIn()))
        // {
        //     navManager.NavigateTo("Account/Login?redirectUri=/Order", forceLoad: true);
        //     return;
        // }

        string email = await authManager.GetUserEmail();
        await manager!.AddToCart(email);
    }
}