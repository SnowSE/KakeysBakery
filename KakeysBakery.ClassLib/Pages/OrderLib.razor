@page "/Order"

@using BlazorBootstrap
@using KakeysBakeryClassLib.Data
@using KakeysBakeryClassLib.OAuth
@using KakeysBakeryClassLib.Pages
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Net.Http.Json

@inject NavigationManager navManager
@inject HttpClient client
@inject IDbContextFactory<PostgresContext> factory

<h3 class="pageTitle">Order</h3>

<Modal @ref="modal" Title="Customize Your Order">
    <BodyTemplate>
        <div class="Modal">
            <table class="table table-borderless">
                <tbody>
                    <tr>
                        <td>
                            <label>Choose @baseGoodTypes?.Where(c => c.Id == clickedBaseGoodId).FirstOrDefault()?.Basegood Type:</label>
                        </td>
                        <td>
                            <select class="form-select" name="flavor" @onchange="SelectHasChanged" id="box">
                                <option> --- </option>
                                @if (baseGoodDetails is not null)
                                {
                                    @foreach (Basegood basegood in baseGoodDetails)
                                    {
                                        @if (basegood.Isavailable ?? false)
                                        {
                                            <option value="@basegood.Flavor?.Id">@basegood.Flavor?.Flavorname</option>
                                        }

                                    }
                                }
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Quantity:</label>
                        </td>
                        <td>
                            <div class="InputBox">
                                <input class="form-control" min="1" type="number" @bind="quantity" id="box" />
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>

            <hr />
            <h5>Total: $@(currentBaseGood?.Suggestedprice * quantity)</h5>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="async () => { await modal.HideAsync(); }">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick="async () => { await AddToCart(); }">Add To Cart</Button>
    </FooterTemplate>
</Modal>

<div class="mt-5 border totalPage">
    <div class="d-flex flex-wrap justify-content-center">
        @if (baseGoodTypes == null)
        {
            <p>Loading products, please wait</p>
        }
        else
        {
            @foreach (Basegoodtype basegoodtype in baseGoodTypes)
            {
                <div class="d-flex position-relative order-container rounded-5 m-3 p-3" @onclick="async () => {await BaseGoodClicked(basegoodtype.Id); await modal.ShowAsync();}">
                    <h3 class="typelabel" style="z-index: 1;">@basegoodtype.Basegood</h3>
                    <img class="imgbutton img-fluid shadow rounded-5 img-thumbnail" src="images/@(basegoodtype.Basegood).jpg">
                </div>
            }
        }
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private IAuthenticationManager? authManager;
    private Modal modal = default!;

    Basegood? currentBaseGood;
    List<Basegood>? baseGoodDetails = null;
    public List<Basegoodtype>? baseGoodTypes = null;

    int clickedBaseGoodId;
    int? quantity = 1;

    PostgresContext context;

    protected override async Task OnInitializedAsync()
    {
        context = factory.CreateDbContext(); // TODO: Extract out

        client.BaseAddress = new Uri(navManager.BaseUri);
        baseGoodTypes = await client.GetFromJsonAsync<List<Basegoodtype>>($"api/Basegoodtype/getall");

        // authManager = new AuthenticationManager(authenticationState, client);
    }

    private async Task SelectHasChanged(ChangeEventArgs e)
    {
        if (e.Value is null) { return; }
        if (e.Value is "---") { return; }

        int typeId = Convert.ToInt32(e.Value.ToString());
        currentBaseGood = await client.GetFromJsonAsync<Basegood>($"api/Basegood/get_from_flavor/{clickedBaseGoodId}/{typeId}");
    }

    public async Task BaseGoodClicked(int basegoodtypeid)
    {
        clickedBaseGoodId = basegoodtypeid;
        baseGoodDetails = await client.GetFromJsonAsync<List<Basegood>>($"api/Basegood/get_from_type/{basegoodtypeid}");
    }

    public async Task AddToCart()
    {
        if (!(await authManager!.IsUserLoggedIn()))
        {
            navManager.NavigateTo("Account/Login?redirectUri=/Order", forceLoad: true);
            return;
        }

        if (quantity == null) { return; }

        Product? product = await GetProduct();
        if (product == null) { return; }

        string email = authManager.GetUserEmail(await authenticationState!)!;
        Customer? customer = await client.GetFromJsonAsync<Customer>($"api/Customer/get_by_email/{email}");
        if (customer is null) { return; }

        Cart c = new()
            {
                Customerid = customer.Id,
                Productid = product.Id,
                Quantity = quantity
            };

        // Save to database
        context.Carts.Add(c);
        await context.SaveChangesAsync();
    }

    private async Task<Product?> GetProduct()
    {
        int bgId = clickedBaseGoodId;

        var pab = await context.ProductAddonBasegoods
            .Include(p => p.Basegood)
            .Where(p => p.Basegood!.Pastryid == currentBaseGood!.Pastryid)
            .Where(p => p.Basegoodid == bgId)
            .Where(p => p.Addon == null)
            .FirstOrDefaultAsync();

        Product? product;
        if (pab is null)
        {
            var bgType = await client.GetFromJsonAsync<Basegoodtype>($"api/Basegoodtype/get/{currentBaseGood!.Pastryid}");
            var flavor = await client.GetFromJsonAsync<Basegoodflavor>($"api/Basegoodflavor/get/{currentBaseGood!.Flavorid}");

            product = new()
                {
                    Id = context.Products.Count() * 2, // TODO HELP FIX ME WHAT
                    Ispublic = true,
                    Productname = $"{bgType!.Basegood} {flavor!.Flavorname}"
                };

            context.Products.Add(product);
            await context.SaveChangesAsync();

            pab = new()
                {
                    Productid = product.Id,
                    Basegoodid = bgId
                };

            context.ProductAddonBasegoods.Add(pab);
            await context.SaveChangesAsync();
        }

        else
        {
            product = await context.Products
                .Where(p => p.Id == pab.Productid)
                .FirstOrDefaultAsync();
        }

        return product;
    }
}
