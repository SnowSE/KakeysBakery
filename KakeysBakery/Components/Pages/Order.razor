@page "/Order"

@using BlazorBootstrap
@inject NavigationManager navManager
@inject HttpClient client
@rendermode InteractiveServer

<h3 class="pageTitle">Order</h3>


<Modal @ref="modal" Title="Customize Your Order">
    <BodyTemplate>
        <div class="Modal">
            <label>Choose @baseGoodTypes?.Where(c => c.Id == clickedBaseGoodId).FirstOrDefault()?.Basegood Type:</label>
            <select name="flavor" @onchange="SelectHasChanged" id="box">
                <option> --- </option>
                @if (baseGoodDetails is not null)
                {
                    @foreach (Basegood basegoods in baseGoodDetails)
                    {
                        @if (basegoods.Isavalible)
                        {
                            <option value="@basegoods.Flavor?.Id">@basegoods.Flavor?.Flavorname</option>
                        }

                    }
                }
            </select>

            <div class="InputBox">
                <label>Quantity:</label>
                <input type="number" @onchange="QuantityChanged" id="box" />
            </div>
            <hr />
            @if (modalError is null)
            {
                <h5>Toatl: $@(currentBaseGood?.Suggestedprice * quantity)</h5>
            }
            else
            {
                <p>Error: @modalError</p>
            }
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="async () => { await modal.HideAsync(); }">Close</Button>
        @if (modalError is null)
        {
            <Button Color="ButtonColor.Primary" @onclick="async () => { await AddToCart(); }">Add To Cart</Button>
        }
    </FooterTemplate>
</Modal>

<div class="mt-5 border totalPage">
    <div class="d-flex flex-wrap justify-content-center">
        @if (baseGoodTypes == null)
        {
            <p>Loading products, please wait</p>
        }
        else
        {
            @foreach (Basegoodtype basegoodtype in baseGoodTypes)
            {
                <div class="d-flex position-relative order-container rounded-5 m-3 p-3" @onclick="async () => {await BaseGoodClicked(basegoodtype.Id); await modal.ShowAsync();}">
                    <h3 class="typelabel" style="z-index: 1;">@basegoodtype.Basegood</h3>
                    <img class="imgbutton img-fluid shadow rounded-5 img-thumbnail" src="images/@(basegoodtype.Basegood).jpg">
                </div>
            }
        }
    </div>
</div>


@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private AuthenticationManager? authManager;

    private Modal modal = default!;
    List<Basegood>? baseGoodDetails = null;
    public List<Basegoodtype>? baseGoodTypes = null;

    Basegood? currentBaseGood;
    int clickedBaseGoodId;
    decimal? quantity = 1;
    string? modalError;


    protected override async Task OnInitializedAsync()
    {
        client.BaseAddress = new Uri(navManager.BaseUri);
        baseGoodTypes = await client.GetFromJsonAsync<List<Basegoodtype>>($"api/Basegoodtype/getall");

        authManager = new(authenticationState, client);
    }

    private async Task SelectHasChanged(ChangeEventArgs e)
    {
        if (e.Value is null) { return; }
        if (e.Value is "---") { return; }

        int typeId = Convert.ToInt32(e.Value.ToString());
        currentBaseGood = await client.GetFromJsonAsync<Basegood>($"api/Basegood/get_from_flavor/{clickedBaseGoodId}/{typeId}");
    }

    private void QuantityChanged(ChangeEventArgs e)
    {
        if (e.Value == null) { return; }
        quantity = 1;

        int testquantity = 1;
        try
        {
            quantity = Convert.ToDecimal(e.Value.ToString());
            modalError = null;
        }
        catch
        {
            modalError = "something went wrong, please try again";
        }

        if (testquantity <= 0)
        {
            modalError = "please input a quantity larger than 1";
        }
    }

    public async Task BaseGoodClicked(int basegoodtypeid)
    {
        clickedBaseGoodId = basegoodtypeid;
        baseGoodDetails = await client.GetFromJsonAsync<List<Basegood>>($"api/Basegood/get_from_type/{basegoodtypeid}");
    }

    public async Task AddToCart()
    {
        if (!(await authManager!.IsUserLoggedIn()))
        {
            navManager.NavigateTo("Account/Login?redirectUri=/Order");
        }

        else
        {
            
        }
    }

    
}