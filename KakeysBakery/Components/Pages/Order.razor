@page "/Order"
@using BlazorBootstrap
@inject IBaseGoodService basegood
@inject IProductService product
@inject ICustomerService customer
@inject IBaseGoodTypeService basegoodtype

@rendermode InteractiveServer

<h3 class="pageTitle">Order</h3>


<Modal @ref="modal" Title="Modal Title">
	<BodyTemplate>
		<p>choose your type</p>
		<select name="flavor" @onchange="SelectHasChanged">
			<option> --- </option>
			@if (baseGoodDetails is not null)
			{
				@foreach (Basegood basegoods in baseGoodDetails)
				{
					@if (basegoods.Isavalible)
					{
						<option value="@basegoods.Flavor?.Id">@basegoods.Flavor?.Flavorname</option>
					}

				}
			}
		</select>

		<div>
			<label>Quantity</label>
			<input type="number" @onchange="QuantityChanged" />
		</div>

		@if(modalerror is null)
		{
			<p>Price of this item: @(currentBaseGood?.Suggestedprice * quantity)</p>
		}
		else
		{
			<p>Error: @modalerror</p>
		}

	</BodyTemplate>
	<FooterTemplate>
		<Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
		@if (modalerror is null)
		{	
			<Button Color="ButtonColor.Primary">Add To Cart</Button>
		}
		else
		{
			
		}
	</FooterTemplate>
</Modal>

<div class="mt-5 border totalPage">
	<div class="d-flex flex-wrap justify-content-center">
		@if (basegoodtypes == null)
		{
			<p>Loading products, please wait</p>
		}
		else
		{
@* 			@foreach (Basegoodtype basegoodtype in basegoodtypes)
			{

				<div class="p-3 d-flex flex-column position-relative" style="width: 30rem;">
					<h3 class="typelabel">@basegoodtype.Basegood</h3>
					<img class="imgbutton img-fluid img-thumbnail rounded-5 shadow" src="images/SweetnessCupcakes.png">
					<button @onclick="async () => {await BaseGoodClicked(basegoodtype.Id); await OnShowModalClick();}" class="btn cartbutton"><i class="bi bi-cart-plus h1 px-3 cart" /></button>
					<p>@basegoodtype.Basegood</p>
				</div>

			} *@

			@foreach (Basegoodtype basegoodtype in basegoodtypes)
			{
				<div class="m-3 p-3 d-flex position-relative order-container rounded-5" @onclick="async () => {await BaseGoodClicked(basegoodtype.Id); await OnShowModalClick();}">
					<h3 class="typelabel" style="z-index: 1;">@basegoodtype.Basegood</h3>
					<img class="imgbutton img-fluid shadow rounded-5 img-thumbnail" src="images/@(basegoodtype.Basegood).jpg">
					@* <button @onclick="async () => {await BaseGoodClicked(basegoodtype.Id); await OnShowModalClick();}" class="btn cartbutton"><i class="bi bi-cart-plus h1 px-3 cart" /></button> *@
				</div>
			}
		}
	</div>
</div>


@code {
	private Modal modal = default!;
	Basegood? currentBaseGood;
	List<Basegood>? baseGoodDetails;
	int clickedbasegoodid;
	decimal? quantity = 1;
	string? modalerror;

	private async Task OnShowModalClick()
	{
		await modal.ShowAsync();
	}

	private async Task OnHideModalClick()
	{
		await modal.HideAsync();
	}

	private async Task SelectHasChanged(ChangeEventArgs e)
	{
		if (e.Value is not null)
		{
			int typeId = Convert.ToInt32(e.Value.ToString());
			currentBaseGood = await basegood.GetBaseGoodFromFlavorAsync(clickedbasegoodid, typeId);
		}
	}

	private void QuantityChanged(ChangeEventArgs e)
	{
		int testquantity = 1;
		try
		{
			testquantity = Convert.ToInt32(e.Value?.ToString());
			quantity = (decimal)testquantity;
			modalerror = null;
		}
		catch
		{
			quantity = 1;
			modalerror = "something went wrong, please try again";
		}
		if (testquantity <= 0)
		{
			modalerror = "please input a quantity larger than 1";
			quantity = 1;
		}
	}


	public async Task BaseGoodClicked(int basegoodtypeid)
	{
		clickedbasegoodid = basegoodtypeid;
		baseGoodDetails = await basegood.GetBasegoodsFromTypeAsync(basegoodtypeid);
	}

	public List<Basegoodtype>? basegoodtypes;

	override protected async Task OnInitializedAsync()
	{
		basegoodtypes = await basegoodtype.GetBaseGoodTypeListAsync();
	}

}
