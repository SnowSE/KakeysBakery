@page "/admin/orders"
@inject NavigationManager nav
@inject HttpClient client
@inject IPurchaseService purchaseService


@rendermode InteractiveServer
<h1>ORDERS</h1>
@if (isLoaded)
{
    <div class="align-content-center bg-light">
        <div class="d-flex flex-row ms-auto">
            <div class="form-check ms-auto m-3">
                <input class="form-check-input" type="checkbox" @bind="showProducts" id="showProductCheckbox">
                <label class="form-check-label" for="showProductCheckbox">
                    Show Products
                </label>
            </div>
            <div class="form-check m-3">
                <input class="form-check-input" type="checkbox" @bind="showFulfilled" id="showFulfilledCheckbox">
                <label class="form-check-label" for="showFulfilledCheckbox">
                    Show Fulfilled Orders
                </label>
            </div>
        </div>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Email</th>
                    <th scope="col">Order Date</th>
                    <th scope="col">Fulfillment Date</th>
                    @if (showProducts)
                    {
                        <th scope="col">Products</th>
                    }
                    <th>FulFill</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Purchase p in purchases)
                {
                    @if (!(p.Isfulfilled ?? false) || showFulfilled)
                    {
                        <tr>
                            <td>@_purchase.Customer!.Forename</td>
                            <td>@_purchase.Orderdate.ToString()</td>
                            <td>@_purchase.Fulfillmentdate.ToString()</td>
                            <td>@_purchase.Customer.Email</td>
                            @if (showProducts)
                            {
                                <td>
                                    <ul>
                                        @foreach (PurchaseProduct prod in p.PurchaseProducts)
                                        {
                                            <li>@prod.Product!.Productname</li>
                                        }
                                    </ul>
                                </td>
                            }

                            @if (p.Isfulfilled ?? false)
                            {
                                <td><button class="btn btn-sucess" disabled>Fulfilled</button></td>

                            }
                            else
                            {
                                <td><button class="btn btn-primary" @onclick="async ()=>{ await updateFulfill(p.Id); }">Fulfill now</button></td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}


@code {
    private bool isLoaded = false;
    private bool showFulfilled = false;
    private bool showProducts = true;
    private List<Purchase> purchases = new();


    protected override async Task OnInitializedAsync()
    {
        client.BaseAddress = new Uri(nav.BaseUri);

        purchases = await client.GetFromJsonAsync<List<Purchase>>("api/Purchase/getall") ?? new();
        List<Customer> Customers = await client.GetFromJsonAsync<List<Customer>>("api/Customer/getall") ?? new();
        List<Product> products = await client.GetFromJsonAsync<List<Product>>("api/Product/getall") ?? new();
        List<PurchaseProduct> purchaseProducts = await client.GetFromJsonAsync<List<PurchaseProduct>>("api/PurchaseProduct/getall") ?? new();

        foreach (PurchaseProduct pp in purchaseProducts)
        {
            pp.Product = products.FirstOrDefault(p => p.Id == pp.Productid);
        }

        foreach (Purchase p in purchases)
        {
            p.Customer = Customers.FirstOrDefault(c => c.Id == p.Customerid);
            p.PurchaseProducts = purchaseProducts.Where(pp => pp.Purchaseid == p.Id).ToList();
        }

        isLoaded = true;
    }

    private async Task updateFulfill(int purchaseId)
    {
        var toUpdate = purchases.FirstOrDefault(p => p.Id == purchaseId);
        if (toUpdate is null) { return; }

        toUpdate.Fulfillmentdate = DateTime.Today;
        toUpdate.Isfulfilled = true;
        await client.PatchAsJsonAsync("api/purchase/update", toUpdate);
    }
}
