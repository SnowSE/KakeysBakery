@page "/admin/send_subscription_email"
@inject IEmailService emailService
@inject  KakeysSharedLib.Data.PostgresContext Context
@inject ICustomerService customer
@using Blazored.TextEditor
@using KakeysBakery.Data
@using Microsoft.EntityFrameworkCore
@using KakeysSharedLib.Data

@attribute [Authorize(Roles = "Admin")]
<h3 class="mt-5">Send an email to all subscribers. You Currently have @customers.Count() Subscribers</h3>
<div class="my-5 p-3" style="background-color: white;">
    <BlazoredTextEditor @ref="@QuillHtml">
        <ToolbarContent>
            <select class="ql-header">
                <option selected=""></option>
                <option value="1"></option>
                <option value="2"></option>
                <option value="3"></option>
                <option value="4"></option>
                <option value="5"></option>
            </select>
            <span class="ql-formats">
                <button class="ql-bold"></button>
                <button class="ql-italic"></button>
                <button class="ql-underline"></button>
                <button class="ql-strike"></button>
            </span>
            <span class="ql-formats">
                <select class="ql-color"></select>
                <select class="ql-background"></select>
            </span>
            <span class="ql-formats">
                <button class="ql-list" value="ordered"></button>
                <button class="ql-list" value="bullet"></button>
            </span>
            <span class="ql-formats">
                <button class="ql-link"></button>
            </span>
        </ToolbarContent>
        <EditorContent>

        </EditorContent>
    </BlazoredTextEditor>

    <div>
        <button class="btn btn-primary d-flex ms-auto mt-3" @onclick="async () => { await SentText(); }">Send</button>
    </div>
</div>

<script>
    function showSuccess() {
        alert("Emails were Sent!");
    }
</script>

@code {

    [Parameter]
    public string? Success { get; set; }

    BlazoredTextEditor? QuillHtml;

    [Inject]
    #pragma warning disable CS8618
    private IJSRuntime JSRuntime { get; set; }
    #pragma warning restore CS8618

    string? QuillHTMLContent { get; set; }

    string? Title { get; set; }
    int AuthorId { get; set; } = 0;
    bool Commentable { get; set; }

    string? Message { get; set; }
    byte[]? ImageBytes { get; set; }

    string MyText = "";

    List<Customer> customers = new();

    protected override async void OnInitialized()
    {
        customers = await customer.GetCustomerListAsync();
        customers = customers.Where(c => c.Issubscribed == true).ToList();
    }

    public async Task GetHTML()
    {
        QuillHTMLContent = await this!.QuillHtml!.GetHTML();
        StateHasChanged();
    }

    private async Task SentText()
    {
        MyText = await this!.QuillHtml!.GetHTML();
        await ClearQuillText();
        await SendEmailToSubscribed(MyText);
        await JSRuntime.InvokeVoidAsync("showSuccess");

    }

    private async Task ClearQuillText()
    {
        string QuillContent = "";

        await this.QuillHtml!.LoadHTMLContent(QuillContent);
        StateHasChanged();
    }

}