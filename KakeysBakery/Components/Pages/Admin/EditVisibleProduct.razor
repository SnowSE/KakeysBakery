@page "/admin/edit-product"
@inject IAddonFlavorService addonFlavor
@inject IAddonService addon
@inject IAddonTypeService addonType
@inject IBaseGoodFlavorService baseGoodFlavor
@inject IBaseGoodService baseGood
@inject IBaseGoodTypeService baseGoodType

@rendermode InteractiveServer

<p>What would you like to edit or add?</p>
<button @onclick='() => ShowOption("EditTopping")'>Edit or Delete a Topping</button>
<button @onclick='() => ShowOption("EditProduct")'>Edit or Delete a Product</button>
<button @onclick='() => ShowOption("AddProduct")'>Add New Product</button>
<button @onclick='() => ShowOption("AddTopping")'>Add New Topping</button>

@if (errorstring is not null)
{
    <p>@errorstring</p>
}

<div>
    @if (isEditingProduct)
    {
        if (baseGoodTypes is null)
        {
            <p> Please wait while we grab the product list</p>
        }
        else
        {
            <select @onchange="SelectChanged">
                <option>---</option>
                @foreach (Basegoodtype good in baseGoodTypes)
                {
                    <option value="@good.Id">@good.Basegood</option>
                }
            </select>

            <div>

                <button @onclick="() => DeleteBaseProduct(-1)">Delete Selected Product</button>

                <button @onclick="() => EditBaseProduct(-1)">Edit Selected Product</button>
            </div>

        }
    }
    @if (isEditingTopping)
    {

        if (addonTypes is null)
        {
            <p> Please wait while we grab the product list</p>
        }
        else
        {
            <select @onchange="SelectChanged">
                <option>---</option>
                @foreach (Addontype addon in addonTypes)
                {
                    <option value="@addon.Id">@addon.Basetype</option>
                }
            </select>

            <div>

                <button @onclick="() => DeleteTopping(-1)">Delete Selected Topping</button>

                <button @onclick="() => EditTopping(-1)">Edit Selected Topping</button>
            </div>
        }
    }
    @if (isAddingProduct)
    {
        if (baseGoodTypes is null)
        {
            <p>Please wait while we grab the product list</p>
        }
        else
        {
            <div>

                <label>How much will this product cost</label>
                <input @bind="productCost" type="number" />
            </div>

            <div>

                <label>What category does this fall under</label>
                <select @onchange="SelectChanged">
                    <option>---</option>
                    @foreach (Basegoodtype basegood in baseGoodTypes)
                    {
                        <option value="@basegood.Id">@basegood.Basegood</option>
                    }
                </select>
            </div>

            <div>

                <label>What is the product name</label>
                <input type="text" @bind="productString" />
            </div>
            <button @onclick="AddNewBaseProduct">Add</button>
        }
    }
    @if (isAddingTopping)
    {
        if (addonTypes is null)
        {
            <p>Please wait while we grab the product list</p>
        }
        else
        {
            <label>How much will this addon cost</label>
            <input @bind="productCost" type="number" />

            <div>

                <label>What category does this fall under</label>
                <select @onchange="SelectChanged">
                    <option>---</option>
                    @foreach (Addontype addon in addonTypes)
                    {
                        <option value="@addon.Id">@addon.Basetype</option>
                    }
                </select>
            </div>
            <div>

                <label>What is the flavor</label>
                <input type="text" @bind="productString" />
            </div>
        }
        <button @onclick="AddNewtopping">Add</button>
        if (confirmationstring is not null)
        {
            <p>@confirmationstring</p>
        }
    }
</div>

@code {
	public int? selectedId;
	public string productString = "";
	public decimal productCost = 0.0m;

	public string errorstring;
	public string confirmationstring;

	private List<Addon>? addons;
	private List<Addonflavor>? addonFlavors;
	private List<Addontype>? addonTypes;
	private List<Basegood>? baseGoods;
	private List<Basegoodflavor>? baseGoodFlavors;
	private List<Basegoodtype>? baseGoodTypes;
	private Basegood? selectedBaseGood;

	private bool isEditingTopping = false;
	private bool isEditingProduct = false;
	private bool isAddingProduct = false;
	private bool isAddingTopping = false;

    protected override async Task OnInitializedAsync()
    {
        addons = await addon.GetAddonListAsync();
        addonFlavors = await addonFlavor.GetAddonFlavorListAsync();
        addonTypes = await addonType.GetAddonTypeListAsync();

        baseGoodFlavors = await baseGoodFlavor.GetBaseGoodFlavorListAsync();
        baseGoodTypes = await baseGoodType.GetBaseGoodTypeListAsync();
        baseGoods = await baseGood.GetBaseGoodListAsync();
    }

    public void SelectChanged(ChangeEventArgs e)
    {
        if (e.Value is null) { return; }
        selectedId = Convert.ToInt32(e.Value.ToString());
    }

    public void ShowOption(string option)
    {
        ResetViews();
        switch (option)
        {
            case "AddProduct":
                isAddingProduct = true;
                break;
            case "AddTopping":
                isAddingTopping = true;
                break;
            case "EditProduct":
                isEditingProduct = true;
                break;
            case "EditTopping":
                isEditingTopping = true;
                break;
            default:
                break;
        }
    }

    public void ResetViews()
    {
        isEditingTopping = false;
        isEditingProduct = false;
        isAddingProduct = false;
        isAddingTopping = false;
    }

	public Addonflavor CreateAddonFlavor()
	{
		return new Addonflavor()
			{
				Flavor = productString
			};
	}

	public Addon CreateAddon(int productid)
	{
		return new Addon()
			{
				Suggestedprice = productCost,
				Addontypeid = selectedId,
				Addonflavorid = productid
			};
	}

	public void AddNewtopping()
	{
		addonFlavor.CreateAddonFlavorAsync(CreateAddonFlavor());
		var returned = addonFlavor.GetAddonFlavorByFlavorAsync(productString);

		addon.CreateAddOnAsync(CreateAddon(returned.Id));
	}

    public void DeleteTopping(int? id)
    {
        if (id is not null)
            addon.DeleteAddOnAsync((int)id);
        else errorstring = "Error in deleting topping, make sure product exists first";
    }
    public void EditTopping(int? id)
    {
        throw new NotImplementedException();
    }

    public async Task AddNewBaseProduct()
    {
        Basegoodflavor newType = new Basegoodflavor()
            {
                Flavorname = productString
            };
        await baseGoodFlavor.CreateBaseGoodFlavorAsync(newType);
        //var returned = await baseGoodFlavor.GetBaseGoodFlavorByBase(productString);


        // Basegood newAddon = new Basegood()
        //     {
        //         Suggestedprice = productCost,
        //         Pastryid = selectedId,
        //         Flavorid = returned?.Id
        //     };
        // await baseGood.CreateBaseGoodAsync(newAddon);
        Reset();
    }

    public void Reset()
    {
        confirmationstring = "success!";
        productString = "";
        productCost = 0.0m;
    }

    public void DeleteBaseProduct(int? id)
    {
        if (id is not null)
            baseGood.DeleteBaseGoodAsync((int)id);
        else errorstring = "Error in deleting topping, make sure product exists first";
    }
    public void EditBaseProduct(int? id)
    {
        throw new NotImplementedException();
    }
}
