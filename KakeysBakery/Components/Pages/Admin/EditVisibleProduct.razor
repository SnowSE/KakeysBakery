@page "/admin/edit-product"
@inject IAddonFlavorService addonFlavor
@inject IAddonService addon
@inject IAddonTypeService addonType
@inject IBaseGoodFlavorService baseGoodFlavor
@inject IBaseGoodService baseGood
@inject IBaseGoodTypeService baseGoodType

@rendermode InteractiveServer

@if (!isEditingProduct && !isEditingTopping && !isAddingProduct && !isAddingTopping)
{
	<p>What would you like to edit or add?</p>
	<button @onclick='() => ShowOption("EditTopping")'>Edit or Delete a Topping</button>
	<button @onclick='() => ShowOption("EditProduct")'>Edit or Delete a Product</button>
	<button @onclick='() => ShowOption("AddProduct")'>Add New Product</button>
	<button @onclick='() => ShowOption("AddTopping")'>Add New Topping</button>
}

@if (errorstring is not null)
{
	<p>@errorstring</p>
}
@if (confirmationstring is not null)
{
	<>@confirmationstring</>
}

<div>
	@if (isEditingProduct)
	{
		<h4>Editing products</h4>
		if (baseGoodTypes is null)
		{
			<p> Please wait while we grab the product list</p>
		}
		else
		{
			<div>
				<label>First select the category</label>
				<select @onchange="SelectChanged">
					<option>---</option>
					@foreach (Basegoodtype good in baseGoodTypes)
					{
						<option value="@good.Id">@good.Basegood</option>
					}
				</select>
			</div>
			<div>
				@if (baseGoods is not null)
				{
					<label>Select which product to edit</label>
					<select @onchange="SelectChanged2">
						<option>---</option>
						@foreach (Basegood flavor in baseGoods)
						{
							<option value="@flavor.Id">@flavor.Flavor!.Flavorname</option>
						}
					</select>
				}
			</div>
			@if (selectedId2 != -1)
			{
				<div>
					<label> what's the price of this product</label>
					<input type="number" />
				</div>

				<div>
					<label> What's the name of this product</label>
					<input type="text" placeholder="" />
				</div>

				<div>
					<label>Is this product currently available</label>
					<input type="checkbox" />
				</div>

				<div>
					<label>What is the quantity that this product comes in</label>
					<input type="number" />
				</div>
			}
			<div>
				<button @onclick="() => Delete(selectedId2)">Delete Selected Product</button>
				<button @onclick="() => Edit(selectedId2)">Edit Selected Product</button>
			</div>
		}
	}
	@if (isEditingTopping)
	{
		<h4>Editing toppings</h4>
		if (addonTypes is null)
		{
			<p> Please wait while we grab the product list</p>
		}
		else
		{
			<div>
				<label>First select the category</label>
				<select @onchange="SelectChanged">
					<option>---</option>
					@foreach (Addontype addon in addonTypes)
					{
						<option value="@addon.Id">@addon.Basetype</option>
					}
				</select>
			</div>
			<div>
				@if (addons is not null)
				{
					<select @onchange="SelectChanged2">
						<option>---</option>
						@foreach (Addon addon in addons)
						{
							<option value="@addon.Id">@addon.Addonflavor!.Flavor</option>
						}
					</select>
				}
			</div>
			<div>
				@if (selectedId2 != -1)
				{
					<div>
						<label>What is the topping name</label>
						<input type="text" />
					</div>

					<div>
						<label>How much does it cost to add</label>
						<input type="number" />
					</div>
				}
			</div>
			<div>
				<button @onclick="() => Delete(selectedId2)">Delete Selected Topping</button>
				<button @onclick="() => Edit(selectedId2)">Edit Selected Topping</button>
			</div>
		}
	}
	@if (isAddingProduct)
	{
		<h4>Adding products</h4>
		if (baseGoodTypes is null)
		{
			<p>Please wait while we grab the product list</p>
		}
		else
		{
			<div>
				<label>How much will this product cost</label>
				<input @bind="productCost" type="number" />
			</div>

			<div>
				<label>What category does this fall under</label>
				<select @onchange="SelectChanged">
					<option>---</option>
					@foreach (Basegoodtype basegood in baseGoodTypes)
					{
						<option value="@basegood.Id">@basegood.Basegood</option>
					}
				</select>
			</div>

			<div>
				<label>What is the product name</label>
				<input type="text" @bind="productString" />
			</div>
			<button @onclick="AddNewBaseProduct">Add</button>
		}
	}
	@if (isAddingTopping)
	{
		<h4>Adding toppings</h4>
		if (addonTypes is null)
		{
			<p>Please wait while we grab the product list</p>
		}
		else
		{
			<label>How much will this addon cost</label>
			<input @bind="productCost" type="number" />

			<div>
				<label>What category does this fall under</label>
				<select @onchange="SelectChanged">
					<option>---</option>
					@foreach (Addontype addon in addonTypes)
					{
						<option value="@addon.Id">@addon.Basetype</option>
					}
				</select>
			</div>
			<div>
				<label>What is the flavor</label>
				<input type="text" @bind="productString" />
			</div>
		}
		<button @onclick="AddNewtopping">Add</button>
	}
	@if (isEditingProduct || isEditingTopping || isAddingProduct || isAddingTopping)
	{
		<button @onclick="ResetViews">Cancel</button>
	}
</div>

@code {
	public int selectedId;
	public int selectedId2 = -1;
	public string productString = "";
	public decimal productCost = 0.0m;

	public string? errorstring;
	public string? confirmationstring;

	private List<Addon>? addons;
	private List<Addonflavor>? addonFlavors;
	private List<Addontype>? addonTypes;
	private List<Basegood>? baseGoods;
	private List<Basegoodflavor>? baseGoodFlavors;
	private List<Basegoodtype>? baseGoodTypes;
	private Basegood? selectedBaseGood;

	private bool isEditingTopping = false;
	private bool isEditingProduct = false;
	private bool isAddingProduct = false;
	private bool isAddingTopping = false;

	protected override async Task OnInitializedAsync()
	{
		addonFlavors = await addonFlavor.GetAddonFlavorListAsync();
		addonTypes = await addonType.GetAddonTypeListAsync();

		baseGoodFlavors = await baseGoodFlavor.GetBaseGoodFlavorListAsync();
		baseGoodTypes = await baseGoodType.GetBaseGoodTypeListAsync();
	}

	public async Task SelectChanged(ChangeEventArgs e)
	{
		if (e.Value is null) { return; }
		selectedId = Convert.ToInt32(e.Value.ToString());

		baseGoods = null;
		addons = null;

		if (isEditingProduct)
		{
			baseGoods = await baseGood.GetBasegoodsFromTypeAsync(selectedId);
		}
		if (isEditingTopping)
		{
			addons = await addon.GetAddonListFromType(selectedId);
		}
		await Task.CompletedTask;
	}

	public void SelectChanged2(ChangeEventArgs e)
	{
		if (e.Value is null) { return; }
		selectedId2 = Convert.ToInt32(e.Value.ToString());
	}

	public void ShowOption(string option)
	{
		ResetViews();
		switch (option)
		{
			case "AddProduct":
				isAddingProduct = true;
				break;
			case "AddTopping":
				isAddingTopping = true;
				break;
			case "EditProduct":
				isEditingProduct = true;
				break;
			case "EditTopping":
				isEditingTopping = true;
				break;
			default:
				break;
		}
	}

	public void ResetViews()
	{
		ResetForm();
		isEditingTopping = false;
		isEditingProduct = false;
		isAddingProduct = false;
		isAddingTopping = false;
		confirmationstring = null;
	}

	public async Task AddNewBaseProduct()
	{
		Basegoodflavor newType = new Basegoodflavor()
			{
				Flavorname = productString
			};
		await baseGoodFlavor.CreateBaseGoodFlavorAsync(newType);
		var returned = await baseGoodFlavor.GetBaseGoodFlavorByBase(productString);

		Basegood newAddon = new Basegood()
			{
				Suggestedprice = productCost,
				Pastryid = selectedId,
				Flavorid = returned?.Id
			};
		await baseGood.CreateBaseGoodAsync(newAddon);
		ResetViews();
		confirmationstring = "Successfully Added Product";
	}

	public async Task AddNewtopping()
	{
		Addonflavor newType = new Addonflavor()
			{
				Flavor = productString
			};
		await addonFlavor.CreateAddonFlavorAsync(newType);
		var returned = await addonFlavor.GetAddonFlavorByFlavorAsync(productString);

		Addon newAddon = new Addon()
			{
				Suggestedprice = productCost,
				Addontypeid = selectedId,
				Addonflavorid = returned?.Id
			};
		await addon.CreateAddOnAsync(newAddon);
		ResetViews();
		confirmationstring = "Successfully Added Topping";
	}

	public void ResetForm()
	{
		productString = "";
		productCost = 0.0m;
	}

	public async void Delete(int id)
	{
		if (isEditingProduct)
			await baseGood.DeleteBaseGoodAsync(id);

		if (isEditingTopping)
			await addon.DeleteAddOnAsync(id);

		ResetViews();
		confirmationstring = "Successfully Added Deleted";
	}

	public void Edit(int id)
	{
		throw new NotImplementedException();
	}
}
